---
title: "Copper pesticide vexposure and DNA methylation"
author: "Yufan Gong"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format:
  html:
    theme: cosmo
    number-sections: true
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: true
    df_print: paged
    grid:
      body-width: 1000px
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 10
    fig.height: 8
    message: FALSE
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message=FALSE)
```

# Introduction

This project aims to investigate the association between copper pesticide exposure and DNA methylation.

  - **Study period**: 1974 - index year (year of blood draw)
  - **Exposure**
    - Filtered copper chemicals which at least 25 people were exposed
      - Count data (# of copper pesticides exposed in the study period)
        - Calculated average pounds of active ingredient applied from 1974 to the index year for each participant
        - Replaced the values above the top 1% with 99 percentile of the data
        - Dichotomized yearly average exp based on median level of controls
        - Summed over the # above median across occupational and residential settings
  - **Outcome**
    - Beta-matrix of DNA methylation
      - Filtered probes(cross-reactive/on SNPs/on sex chromosomes/non-CpG loci) 
      - Created a residual matrix to remove the unwanted variation(e.g., age at blood draw, sex, race, smoking status, study wave, cell composition and OP counts)

# Load and clean data

```{r}
options(mc.cores = 9)
pacman::p_load(
  #For creating tables
  "kableExtra",  #create amazing tables: kbl()
  "skimr",       #summary statistics: skim()
  #"dataxray",    #explore data: report_xray()
  "arsenal",     #create tables: tableby()
  "expss",       #create contingency tables: calc_cro_cpct()  
  "huxtable",    #as_hux_table()
  "flextable",   #as_flex_table()
  "DT",          #datatable()
  "gtsummary",   #create amazing tables: tbl_summary()
  
  #For manipulating data
  "rlang",       #for Non-standard evaluation: eval(), expr(), ensym(), caller_env(), exec(), !!
  "magrittr",    #for the pipe operator: %>% and %<>%
  "broom",       #for tidying up the results of a regression: tidy()
  "lubridate",   #for manipulating dates: intervals(), durations()
  "labelled",    #labelleling the data: set_variable_labels(), set_value_labels()
  
  # Enhancing plots
  #"scales",      #makes easy to format percent, dollars, comas: percent()
  #"ggalt",       #makes easy splines: geom_xsplines()
  #"ggeasy",      #applies labels among other things: easy_labs()
  "gridExtra",   #combining plots and tables on plots: grid.arrange(), tableGrob()
  "ggpubr",      #combines plots: ggarrange()
  "ggthemes",     #blind colors
  "ggVennDiagram", #venn diagram
  #"Amelia",      #check missing pattern: missmap()
  #"pheatmap",    #create pretty heatmap: pheatmap()
  #"qqman",       #create Manhattan plots: manhattan()
  
  # Other great packages
  "glue",        #replaces paste: glue()
  "Hmisc",       #explore the data: describe()
  #"mise",        #clear environment space: mise()
  "gmodels",     #create contigency table: CrossTable()
  "meta",        #meta models: metagen()
  "codebook",    #amazing package to set labels: dict_to_list()
  
  # For analysis
  #"lme4",        #linear mixed-effects model: lmer()
  #"nlme",        #linear and nonlinear mixed effects:
  # "minfi",       #getBeta(), getSex()
  # "meffil",      #normalization: meffil.normalize.dataset(), ewas: meffil.ewas()
  # "DMRcate",      #For DMR analysis: dmrcate()
  # "WGCNA",       #weighted correlation network analysis: GOenrichmentAnalysis()
  # "ChAMP",       #champ.DMP(), champ.DMR()
  #"mixOmics",    #block.plsda()
  # "ENmix",      # for DMR analysis: combp()
  
  #For loading data
  "readxl",      #read in excel data: read_xlsx
  "haven",       #read in sas data: read_sas()
  "here",        #setting the directory in the project: here()
  
  #For data manipulation
  "tidyverse"   #data manipulation and visualization:select(), mutate()
)

#invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE))
# if (!requireNamespace("BiocManager", quietly=TRUE))
#   install.packages("BiocManager")
# BiocManager::install("HPO.db")
# install.packages("devtools")
# library(devtools)
# install_github("perishky/meffil",force = TRUE)
# remotes::install_github("perishky/meffil")
# library(minfi)
# library(minfiData)
# library(sva)
# library(meffil)
# library(mixOmics)

# 3. Create sub folders ---------------------------------------------------


# c("script","rmd","tables","figures","data") %>%
#   map(dir.create)


# 4. clean env ------------------------------------------------------------

# mise()
rm(list = ls())

# 5. create functions -----------------------------------------------------


quote_all <- function(...){
  args<-rlang::ensyms(...)
  paste(purrr::map(args,as_string),sep = "")
}

`%notin%` <- Negate(`%in%`)

# create table1
table1 <- function(table) {
  
  table %>% 
    as_hux_table() -> hux
  
  table %>% 
    as_flex_table() -> flex
  
  return(list(hux=hux, flex=flex))
  
}

#create functions to remove outliers

## 1. use IQR, an alternative of 1
extreme_remove_iqr <- function(x) {
  Q = quantile(x, c(0.25, 0.75), na.rm = TRUE)
  iqr = IQR(x, na.rm = TRUE)
  x = if_else(x < Q[1] - 1.5 * iqr | x > Q[2] + 1.5 * iqr, NA, x)
}

## 2. use percentile/thousands: remove
extreme_remove_percentile <- function(x) {
  Q = quantile(x, c(0.001, 0.999), na.rm = TRUE)
  x = if_else(x < Q[1] | x > Q[2], NA, x)
}


## 3. use percentile/thousands: winsorization
extreme_remove_percentile_win <- function(x) {
  Q = quantile(x, c(0.01, 0.99), na.rm = TRUE)
  x = case_when(
    # x < Q[1] ~ Q[1],
    x > Q[2] ~ Q[2],
    TRUE ~ x)
}

# an equivalent as the third function
dec_out <- function(x, na.rm = TRUE) {
  Q = quantile(x, c(0.05, 0.95), na.rm = na.rm)
  id_p = x > Q[2]
  id_n = x < Q[1]
  x[id_p] = Q[2]
  x[id_n] = Q[1]
  return(x)
}

# different data processing methods
create_quantile <- function(data){
  data %>% 
    mutate_at(vars(starts_with("chem")), 
              ~if_else(.x > quantile(.x, 
                                     c(0.25, 0.75), na.rm = TRUE)[2], 
                       "high", "low"))
}

create_evernever <- function(data){
  data %>% 
    mutate_at(vars(starts_with("chem")), 
              ~if_else(.x > 0, "ever", "never"))
}


create_ztrans <- function(data){
  data %>% 
    mutate_at(vars(starts_with("chem")),
              ~scale(., center = TRUE)
              %>% as.vector())
}

create_counts <- function(data){
  data %>% 
    as_tibble()
}

```

```{r}
# Load data ---------------------------------------------------------------

{
  # Define variable names for specific data files.
  grape_name <- quote_all(c_grape_in,c_walk, c_grape_out, 
                          r_grape_out, r_grape_in, r_walk)
 
  # Get a list of all .txt files in the current directory and subdirectories. 
  list.dirs(here(),recursive = FALSE) %>% 
    list.files("\\.txt$", full.names = TRUE, recursive = T) %>% 
    # Search for files
    grep("(?i)XWALK|(?i)GRAPES|input2",., value=TRUE, ignore.case = TRUE) %>%
    # Read in each file
    map(read_delim) %>%
    # Rename all column names to lowercase
    map(~rename_all(.x, str_to_lower)) %>% 
    # Assign each data frame a name
    set_names(grape_name) %>%
    list2env(.,envir = .GlobalEnv) %>% 
    invisible()
  
  # The following sessions follow the same logic.
  exposure <- quote_all(exp_c,c_dur_nolag_dr,c_wt_long,chem_class,
                        chemlist,indexyr,serum,exp_r,r_dur_nolag_dr,r_wt_long)
  
  list.dirs(here(),recursive = FALSE) %>% 
    list.files("\\.xlsx$", full.names = TRUE, recursive = T) %>%
    grep("nolag|wt_long|chemlist|dr_long|SERUM|Indexyr2|chem_class",., 
         value=TRUE, ignore.case = TRUE) %>% 
    map(read_xlsx) %>% 
    map(~rename_all(.x, str_to_lower)) %>% 
    set_names(exposure) %>%
    list2env(.,envir = .GlobalEnv) %>% 
    invisible()
  
  
  pest_name <- quote_all(peg_c,cgep_intv,pest_cov_more,pest_cov,peg_r)
  
  list.dirs(here(),recursive = FALSE) %>%
    list.files("\\.csv$", full.names = TRUE, recursive = T) %>%
    grep("avg_lag10|Pest_cov|CGEP_intv",., value=TRUE, ignore.case = TRUE) %>%
    keep(~!str_detect(.x,"Summary")) %>%
    map(read_csv) %>%
    map(~rename_all(.x, str_to_lower)) %>%
    set_names(pest_name) %>%
    list2env(.,envir = .GlobalEnv) %>% 
    invisible()
  
  #import methylation data
  
  # {
  #   #for get residual use
  #   # list.dirs(here(),recursive = FALSE) %>%
  #   #   list.files("\\.RData$", full.names = TRUE, recursive = T) %>%
  #   #   grep("nors_filter",., 
  #   #        value=TRUE, ignore.case = TRUE) %>%
  #   #   keep(~!str_detect(.x,"win|dmplist|old")) %>%
  #   #   map(.,load,.GlobalEnv)
  #   
  #   
    #for load result use
    # list.dirs(here::here(),recursive = FALSE) %>%
    #   list.files("\\.RData$", full.names = TRUE, recursive = T) %>%
    #   grep("meffil_count",.,
    #        value=TRUE, ignore.case = TRUE) %>%
    #   # keep(~!str_detect(.x,"win|dmplist|old")) %>%
    #   map(.,load,.GlobalEnv)
    # }

  
  # load residuals
  list.dirs(here(),recursive = FALSE) %>%
    list.files("\\.RData$", full.names = TRUE, recursive = T) %>%
    grep("filter_",.,
         value=TRUE, ignore.case = TRUE) %>%
    keep(~!str_detect(.x,"win|dmplist|old|more|90|0.1|archive")) %>%
    map(.,load,.GlobalEnv) %>% 
    invisible()
  
  # load filtered beta-matrix
  list.dirs(here::here(),recursive = FALSE) %>%
    list.files("\\.RData$", full.names = TRUE, recursive = T) %>%
    base::grep("noob",., 
         value=TRUE, ignore.case = TRUE) %>%
    discard(~str_detect(.x,"raw|old|new|archive|nors_filter")) %>%
    map(.,load,.GlobalEnv) %>% 
    invisible()
  
  
  methl_name <- quote_all(datSampleSteve,datSamplePEG,cpg)
  list.dirs(here(),recursive = FALSE) %>%
    list.files("\\.csv$", full.names = TRUE, recursive = T) %>%
    grep("normalize|DNAmage|SampleAnnotation",., 
         value=TRUE, ignore.case = TRUE) %>%
    map(read_csv) %>% 
    map(~rename_all(.x, str_to_lower)) %>%
    set_names(methl_name) %>%
    list2env(.,envir = .GlobalEnv) %>% 
    invisible()
  
  keyvar <- quote_all(cgep_keyvar,peg1_keyvar, peg2_keyvar)
  list.dirs(here(),recursive = FALSE) %>%
    list.files("\\.sas7bdat$", full.names = TRUE, recursive = T) %>%
    grep("keyvar|key_var",., value=TRUE, ignore.case = TRUE) %>% 
    keep(~!str_detect(.x,"2017|2018|(?i)raw|(?i)archive|(?i)grapes")) %>% 
    map(read_sas) %>% 
    map(~rename_all(.x, str_to_lower)) %>%
    set_names(keyvar) %>%
    list2env(.,envir = .GlobalEnv) %>% 
    invisible()
}
```

```{r}
# clean duration data -----------------------------------------------------

#1. Get the clean peg_cov & peg_keyvar data

{
  list("(?i)metal|copper", "(?i)copper", "(?i)Organophosphorus") %>% 
    map(function(data){
      chem_class %>% 
        filter(str_detect(`chem class (pan)`, data)) %>% 
        filter(chemcode %notin% c("chem1751", "chem153"))
    }) %>% 
    set_names("heavy_metal", "chem_copper", "chem_op") %>% 
    list2env(.GlobalEnv) %>% 
    invisible()
  
  
  keyvars <- quote_all(pegid, smoker, age_diag, county, sex, race, 
                       minority, a1_schyrs, date_main_interview_collected)
  
  peg_keyvars <- list(peg1_keyvar, peg2_keyvar) %>% 
    map(function(data){
      data %>% 
        select(all_of(keyvars)) %>% 
        mutate_all(~replace(.x, .x == -6, NA)) %>% 
        filter(str_length(pegid)>5) %>% 
        mutate(interview_date = year(date_main_interview_collected))
    }) %>% 
    bind_rows() %>% 
    distinct() %>% 
    rename(smokers = smoker) %>% 
    set_variable_labels(
      pegid = "PEGID",
      sex = "Gender",
      minority = "Ethnicity",
      smokers = "Smoking status",
      a1_schyrs = "School years",
      county = "County",
      race = "Race",
    ) %>% 
    set_value_labels(
      minority = c("Non-White"=1, "White"=0),
      race = c("White" = 1, "Black" = 2, "Latino" = 3, 
               "Asian" = 4, "Native American" = 5, "Other" = 9),
      sex = c("Male"=1, "Female"=2),
      smokers = c("Non-smoker"=0, "Former smoker"=1, "Current smoker"=2),
      county = c("Fresno"=1, "Kern"=2, "Tulare"=3, "Other" =4)
    )
  
datSamplePEG %>% 
  select(pegid, pdstudyparkinsonsdisease, 
           pdstudydate_main_interview_colle, pdstudydatediagnosed, 
           pdstudyphys_apptdate) %>% 
  filter(!is.na(pdstudyparkinsonsdisease)) %>% 
  group_by(pdstudyparkinsonsdisease) %>% 
  group_split() %>% 
  set_names("control_ids", "case_ids") %>% 
  list2env(.GlobalEnv) %>% 
  invisible()
  
  
peg_keyvars %>% 
    full_join(pest_cov_more %>% select(pegid, pd), by = "pegid") %>% 
    full_join(datSamplePEG %>% 
                select(pegid, pdstudyparkinsonsdisease, age), by = "pegid") %>% 
    left_join(indexyr %>% 
                select(pegid, index_date), by = "pegid") %>% 
    rows_update(tibble(pegid = "80178CW37", a1_schyrs = 16, county = 3,
                       smokers = 1, race = 1, minority = 1)) %>%
    rows_update(tibble(pegid = "82413PR36", a1_schyrs = 9, county =2,
                       smokers = 1, race = 1, minority = 1, sex = 1)) %>%
    rows_update(tibble(pegid = "83620KP43", a1_schyrs = 12, county=1,
                       smokers = 2, race = 1, minority = 1, sex = 2)) %>% 
    mutate(study = if_else(grepl('^1', pegid), "PEG 1", "PEG 2"),
           race_new = case_when(race == 1 ~ "White",
                                race == 3 ~ "Hispanic",
                                TRUE ~ "Other"),
           index_date = if_else(is.na(index_date), interview_date, index_date), 
           age_diag = if_else(is.na(age_diag), age, age_diag),
           pd_new = case_when(
             pd == 1 | pdstudyparkinsonsdisease == 1 ~ "With PD",
             pd == 0 | pdstudyparkinsonsdisease == 0 ~ "Without PD",
             TRUE ~ as.character(pd)),
           indexyr = index_date,
           indexyr5 = indexyr-5,
           indexyr10 = indexyr-10) %>% 
  filter(!is.na(pd_new)) %>% 
  group_by(pd_new) %>% 
  modify_if(is.labelled, to_factor) %>% 
  mutate_at(vars(pd_new, race_new), fct_rev) %>% 
  group_split() %>% 
  set_names("pest_case", "pest_control") %>% 
  list2env(.GlobalEnv) %>% 
  invisible()

pest_methylation_clean <- list(
  list(pest_case, pest_control),
  list(case_ids, control_ids)
) %>% 
  pmap(function(data1, data2){
    data1 %>% 
      filter(pegid %in% data2$pegid)
  })

pest_methylation_clean_total <- pest_methylation_clean %>% 
  bind_rows()
  
  # summary(pest_case_methylation$sex)
}

{
  # list(c_dur_nolag_dr,r_dur_nolag_dr) %>% 
  #   map(function(data){
  #     data %>% 
  #       select_if(colSums(.>0)>=25) %>%  
  #       select(-pd) %>% 
  #       filter(pegid %in% pest_cov2$pegid) %>% 
  #       left_join(pest_cov2, by="pegid") %>% 
  #       set_variable_labels(agenew = "Age")
  #   }) %>% 
  #   set_names("c_dur_nolag_dr_clean",
  #             "r_dur_nolag_dr_clean") %>% 
  #   list2env(.,envir = .GlobalEnv)
  
  chemlist_new <- chemlist %>% 
    mutate(chemcode=glue("chem{chemcode}")) %>% 
    distinct()
}

#3. clean GRAPES data

{
  #limit to 1974-indexyr and remove -9999
  #and sum across chems for same year and person
  
  list(c_grape_out,r_grape_out) %>% 
    map(function(data){
      pest_methylation_clean %>% 
        map(function(df){
          data %>% 
            inner_join(df %>% 
                         select(pegid, indexyr), by = "pegid") %>% 
            group_by(pegid) %>% 
            filter(year > 1973 & year <= indexyr & chempound >= 0) %>% 
            ungroup() %>% 
            mutate(chemcode = paste0("chem",chemcode)) %>% 
            group_by(pegid, year, chemcode) %>%
            summarise(sum_total_lbs = sum(chempound),
                      .groups = "keep") %>%
            ungroup()
        })
    }) %>% 
    set_names("c_grape_agg","r_grape_agg") %>% 
    list2env(.,envir = .GlobalEnv) %>% 
    invisible()
  
  #pull in input to get unexposed and limit to 1974-indexyr
  # merge each dataframe from two lists and add zero for unexposed
  list(
    pest_methylation_clean,
    c_grape_agg,
    r_grape_agg
  ) %>% 
    pmap(function(data1, data2, data3){
      list(
        list(c_grape_in,r_grape_in) %>% 
          map(function(data){
            data %>% 
              inner_join(data1 %>% 
                           select(pegid, indexyr), by = "pegid") %>% 
              group_by(pegid) %>% 
              filter(year > 1973 & year <= indexyr) %>% 
              ungroup() %>% 
              select(pegid, year)
          }), 
        list(data2, data3)) %>% 
        pmap(left_join, by = c("pegid","year")) %>% 
        map(function(df){
          df %>% 
            mutate(sum_total_lbs = if_else(
              is.na(sum_total_lbs), 0, sum_total_lbs))
        })
    }) %>% 
    set_names("case_agg_yr_all","control_agg_yr_all") %>% 
    list2env(.,envir = .GlobalEnv) %>% 
    invisible()


  
  # Calculate lagged years
  
  list(list(c_grape_in, r_grape_in),
       c("c","r")) %>%
    pmap(function(data1, data2){
      data1 %>%
        select(pegid, year) %>%
        distinct() %>%
        right_join(pest_methylation_clean_total %>%
                     select(pegid, indexyr, indexyr5, indexyr10, pd, study),
                   by = "pegid") %>%
        filter(year > 1973) %>%
        mutate(exp_yrs_lag_dr = ifelse(year <= indexyr, 1, NA),
               exp_yrs_lag_5 = ifelse(year <= indexyr5, 1, NA),
               exp_yrs_lag_10 = ifelse(year <= indexyr10, 1, NA)) %>%
        group_by(pegid) %>%
        summarise_at(vars(starts_with("exp")), ~sum(.x, na.rm=T),
                     .groups = "keep") %>%
        mutate(location = data2)
    }) %>%
    set_names("exp_yrs_lag_c", "exp_yrs_lag_r") %>%
    list2env(.GlobalEnv) %>% 
    invisible()
  # 
  # exp_yrs_lag <- list(exp_yrs_lag_c, exp_yrs_lag_r) %>% 
  #   rbindlist() %>% 
  #   pivot_wider(id_cols = pegid,
  #               names_from = location,
  #               values_from = exp_yrs_lag_dr:exp_yrs_lag_10) %>% 
  #   mutate_all(~replace(.,is.na(.),0))
  
  pest_methylation_clean %>% 
    map(function(df){
      list(list(c_grape_in,r_grape_in),
           c("c","r")) %>% 
        pmap(function(data1,data2){
          data1 %>% 
            select(pegid,year) %>% 
            distinct() %>% 
            inner_join(df %>% 
                         select(pegid, indexyr, indexyr5, 
                                indexyr10, pd_new, study), 
                       by = "pegid") %>% 
            filter(year > 1973) %>% 
            mutate(exp_yrs_lag_dr = ifelse(year <= indexyr,1,NA),
                   exp_yrs_lag_5 = ifelse(year <= indexyr5,1,NA),
                   exp_yrs_lag_10 = ifelse(year <= indexyr10,1,NA)) %>% 
            group_by(pegid) %>% 
            summarise_at(vars(starts_with("exp")),~sum(.x,na.rm=T),
                         .groups = "keep") %>% 
            mutate(location = data2)
        }) 
    }) %>% 
    set_names("exp_yrs_lag_case_list", "exp_yrs_lag_control_list") %>% 
    list2env(.GlobalEnv) %>% 
    invisible()
  
  
  list(
    exp_yrs_lag_case_list,
    exp_yrs_lag_control_list
  ) %>% 
    map(function(datalist){
      datalist %>% 
        rbindlist() %>% 
        pivot_wider(id_cols = pegid,
                    names_from = location,
                    values_from = exp_yrs_lag_dr:exp_yrs_lag_10) %>% 
        mutate_all(~replace(.,is.na(.),0))
    }) %>% 
    set_names("exp_yrs_lag_case", "exp_yrs_lag_control") %>% 
    list2env(.GlobalEnv) %>% 
    invisible()
  
  
  exp_yrs_lag <- list(exp_yrs_lag_case, exp_yrs_lag_control) %>% 
    bind_rows()
}


# clean time window ------------------------------------------------------

{
  #number of years of exposure history
  list(
    list(case_agg_yr_all[[1]], control_agg_yr_all[[1]]),
    list(case_agg_yr_all[[2]], control_agg_yr_all[[2]]),
    pest_methylation_clean
  ) %>% 
    pmap(function(data1, data2, data3){
      list(data1,data2) %>% 
        map(function(data){
          data %>% 
            inner_join(data3 %>% 
                         select(pegid, indexyr, pd_new, study), 
                       by = "pegid") %>% 
            mutate(window=cut(year,breaks = c(1973, 1989, Inf),
                              include.lowest = FALSE,
                              labels = c("1974-1989","1990-index"))) %>% 
            # filter(year <= indexyr) %>%
            distinct()     
          }) 
    }) %>% 
    set_names("exp_window_address_case", "exp_window_address_control") %>% 
    list2env(.GlobalEnv) %>% 
    invisible()
  
  exp_window_address_all_list <- list(exp_window_address_case, 
                                      exp_window_address_control) %>% 
    pmap(function(data1, data2){
      rbind(data1, data2)
    })
  
  list(
    list(exp_window_address_case[[1]], exp_window_address_control[[1]]),
    list(exp_window_address_case[[2]], exp_window_address_control[[2]]),
    list(exp_yrs_lag_case_list[[1]], exp_yrs_lag_control_list[[1]]),
    list(exp_yrs_lag_case_list[[2]], exp_yrs_lag_control_list[[2]]),
    pest_methylation_clean
  ) %>% 
    pmap(function(df1, df2, df3, df4, df5){
      list(list(df1, df2),
           list(df3, df4))%>% 
        pmap(function(data1,data2){
          data1 %>% 
            mutate(ind = 1) %>% 
            #mutate_at(vars(sum_total_lbs), dec_out) %>%
            group_by(pegid, chemcode, window) %>% 
            summarise(duration = sum(ind),
                      chemuse = sum(sum_total_lbs),
                      .groups = "keep") %>% 
            # inner_join(pest_cov2 %>% 
            # select(pegid, pd, study), by = "pegid") %>% 
            full_join(data2 %>% select(-location), by = "pegid") %>% 
            right_join(df5, by = "pegid") %>% 
            ungroup() %>% 
            filter(!is.na(pd) & !is.na(chemuse)) %>% 
            mutate(chemuse_wt_10 = chemuse/exp_yrs_lag_10,
                   chemuse_wt_5 = chemuse/exp_yrs_lag_5,
                   chemuse_wt_dr = chemuse/exp_yrs_lag_dr)
        }) 
    }) %>% 
    set_names("exp_lb_window_case_wt", "exp_lb_window_control_wt") %>% 
    list2env(.GlobalEnv) %>% 
    invisible()
  
  list(
    list(exp_window_address_case[[1]], exp_window_address_control[[1]]),
    list(exp_window_address_case[[2]], exp_window_address_control[[2]]),
    list(exp_yrs_lag_case_list[[1]], exp_yrs_lag_control_list[[1]]),
    list(exp_yrs_lag_case_list[[2]], exp_yrs_lag_control_list[[2]]),
    pest_methylation_clean
  ) %>% 
    pmap(function(df1, df2, df3, df4, df5){
      list(list(df1, df2),
           list(df3, df4))%>% 
        pmap(function(data1,data2){
          data1 %>% 
            mutate(ind = 1) %>% 
            #mutate_at(vars(sum_total_lbs), dec_out) %>%
            group_by(pegid, chemcode) %>% 
            summarise(duration = sum(ind),
                      chemuse = sum(sum_total_lbs),
                      .groups = "keep") %>% 
            full_join(data2 %>% select(-location), by = "pegid") %>% 
            right_join(df5, 
                       by = "pegid") %>% 
            ungroup() %>% 
            filter(!is.na(pd) & !is.na(chemuse)) %>% 
            mutate(chemuse_wt_10 = chemuse/exp_yrs_lag_10,
                   chemuse_wt_5 = chemuse/exp_yrs_lag_5,
                   chemuse_wt_dr = chemuse/exp_yrs_lag_dr)
        }) 
    }) %>% 
    set_names("exp_lb_case_wt", "exp_lb_control_wt") %>% 
    list2env(.GlobalEnv) %>% 
    invisible()

}

# clean methylation data --------------------------------------------------

{
  myvar1 <- quote_all(sampleid,pegid,female,meanmethbysample,
                      aim_self_ethnicity,pdstudynumberyearswithpdatbloodd,
                      gds1,gds1_6,gds1_7,gds1_8,gds_cat,gds_cat1,
                      rfvotecaucasian, c11_depression,c11_depressionage)
  
  myvar2 <- quote_all(sampleid,meanxchromosome,aahoadjcellcounts,
                      bioage4hastaticadjage,ageaccelerationresidual,
                      cd8t,cd4t,nk,bcell,mono,gran,pdstudystudy,
                      pdstudydiseasestatus)
  
  list(heavy_metal$chemcode, chem_copper$chemcode, chem_op$chemcode) %>% 
    map(function(chemlist){
      list(
        list(exp_lb_case_wt[[1]], exp_lb_control_wt[[1]]),
        list(exp_lb_case_wt[[2]], exp_lb_control_wt[[2]]),
        pest_methylation_clean
      ) %>% 
        pmap(function(df1, df2, df3){
          list(df1, df2) %>% 
            map(function(data){
              data %>% 
                select(pegid,chemcode,chemuse_wt_dr) %>% 
                pivot_wider(
                  id_cols = pegid,
                  names_from = chemcode,
                  values_from = chemuse_wt_dr
                ) %>% 
                select(pegid, any_of(chemlist)) %>% 
                full_join(datSamplePEG %>%
                            select(all_of(myvar1)), by = "pegid") %>%
                left_join(datSampleSteve %>%
                            select(all_of(myvar2)),
                          by = "sampleid") %>% 
                right_join(df3, by = "pegid") %>% 
                mutate(
                  rfvotecaucasian2 = case_when(
                    (is.na(rfvotecaucasian) & race == 1) | 
                      (is.na(rfvotecaucasian) & 
                         aim_self_ethnicity == "Caucasian") ~ 1,
                    is.na(rfvotecaucasian) ~ 0.5,
                    TRUE ~ rfvotecaucasian),
                  ethnicity = case_when(
                    is.na(aim_self_ethnicity) | 
                      aim_self_ethnicity == "Asian" ~ "Other",
                    TRUE ~ aim_self_ethnicity),
                  caucasian = if_else(ethnicity == "Caucasian",0,1),
                  gds1_5 = if_else(gds1<5,0,1),
                  c11_3 = case_when(
                    c11_depression == 0 ~ 0,
                    c11_depression == 1 & (c11_depressionage < age_diag-4) ~ 2,
                    TRUE ~ 1),
                  gds5_pd = if_else(
                    pd_new == "With PD", 1 + gds1_5, 0),
                  c11_3m = if_else(
                    pd_new == "With PD", 1 + c11_3, 0),
                  c11_2 = if_else(
                    pd_new == "With PD", 1 + c11_depression, 0),
                  nlr = gran/(cd8t + cd4t + nk + bcell + mono)
                ) %>% 
                set_value_labels(
                  female = c("Male"=0, "Female"=1)) %>% 
                modify_if(is.labelled, to_factor) %>% 
                mutate_at(vars(county), fct_drop) 
            }) 
        }) 
    }) %>% 
    set_names("lb_sd_metal_wt", "lb_sd_copper_wt", "lb_sd_op_wt") %>% 
    list2env(.GlobalEnv) %>% 
    invisible()
  
  
  #calculate the n and % of exposure for each chemical: combine
  list(lb_sd_metal_wt, lb_sd_copper_wt, lb_sd_op_wt) %>% 
    map(function(df){
      list(
        df,
        list(569, 237)
      ) %>% 
        pmap(function(data1,data2){
          data1 %>% 
            map(function(data){
              data %>% 
                dplyr::select(pegid,starts_with("chem")) 
            }) %>% 
            bind_rows() %>% 
            distinct() %>% 
            group_by(pegid) %>% 
            summarise_all(sum, na.rm=T) %>% 
            pivot_longer(
              cols = starts_with("chem"),
              names_to = c("chemcode"),
              values_to = "duration") %>% 
            mutate(dur_ind=if_else(duration>0,1,0)) %>% 
            group_by(chemcode) %>% 
            summarise(n_exp = sum(dur_ind),
                      .groups = "keep") %>% 
            mutate(pct = n_exp/data2) %>% 
            left_join(chemlist_new, by="chemcode") %>% 
            left_join(chem_class, by = c("chemname","chemcode")) %>% 
            relocate(chemname, chemcode, `chem class (pan)`)
        }) 
    }) %>% 
    set_names("dur_long_combine_metal_list", 
              "dur_long_combine_copper_list",
              "dur_long_combine_op_list") %>% 
    list2env(.GlobalEnv) %>% 
    invisible()

  
  list(dur_long_combine_metal_list, dur_long_combine_copper_list, 
       dur_long_combine_op_list) %>% 
    map(function(df){
      df %>% 
        map(function(data){
          data %>% 
            select(-c(pct, `chem class (pan)`))
        }) %>% 
        reduce(inner_join, by = c("chemname", "chemcode")) %>% 
        rename(case = n_exp.x,
               ctrl = n_exp.y) %>% 
        mutate(n_exp = case + ctrl,
               pct = n_exp/806) %>% 
        left_join(chem_class, by = c("chemname","chemcode")) %>% 
        relocate(chemname,chemcode,`chem class (pan)`)
    }) %>% 
    set_names("dur_long_combine_metal",
              "dur_long_combine_copper",
              "dur_long_combine_op") %>% 
    list2env(.GlobalEnv) %>% 
    invisible()
  
  
  list(dur_long_combine_metal, dur_long_combine_copper, dur_long_combine_op) %>% 
    map(function(df){
      df %>% 
        filter(n_exp >= 25) %>%
        filter(chemcode %notin% c("chem1638", "chem164", "chem283",
                                  "chem353", "chem354")) %>%
        pull(chemcode) 
    }) %>% 
    set_names("metal_filter", "copper_filter", "op_filter") %>% 
    list2env(.GlobalEnv) %>% 
    invisible()
  
  
  list(
    list(metal_filter, copper_filter, op_filter),
    list(heavy_metal, chem_copper, chem_op)
  ) %>% 
    pmap(function(data1, data2){
      data2 %>% 
        filter(chemcode %in% data1) %>% 
        filter(chemcode %notin% c("chem1638", "chem164", "chem283",
                                  "chem353", "chem354")) %>% 
        arrange(chemcode)
    }) %>%
    set_names("metal_filter_name", "copper_filter_name", "op_filter_name") %>%
    list2env(.GlobalEnv) %>% 
    invisible()

  
  metal_todrop <- setdiff(heavy_metal$chemcode, metal_filter)
  copper_todrop <- setdiff(chem_copper$chemcode, copper_filter)
  op_todrop <- setdiff(chem_op$chemcode, op_filter)
  
  # setdiff(names(r_lb_sd_case_wt_10), names(c_lb_sd_case_wt_10))
  
  #drop pegids which are not in grape in/out data & z-transform
  
  id_remove_c <- c("10259MK15", "10818RH27", "11022FC23", 
                   "11887JA27", "12158FS27", "12313LH31", "85491MA39") 
  id_remove_r <- c("11887JA27")
  
  
  
  list(
    list(lb_sd_metal_wt, lb_sd_copper_wt, lb_sd_op_wt),
    list(metal_todrop, copper_todrop, op_todrop)
  ) %>% 
    pmap(function(df, chem){
      list(create_quantile, create_evernever, 
           create_ztrans, create_counts) %>% 
        map(function(method){
          list(
            df %>% 
              map(function(data){
                data[[1]]
              }),
            df %>% 
              map(function(data){
                data[[2]]
              }),
            list(chem, chem)
          ) %>% 
            pmap(function(df1, df2, df3){
              list(
                list(df1, df2),
                list(id_remove_c, id_remove_r)
              ) %>% 
                pmap(function(data1, data2){
                  data1 %>% 
                    select(-any_of(df3)) %>%
                    filter(pegid %notin% data2 & !is.na(pegid)) %>%
                    mutate_at(vars(starts_with("chem")), 
                              ~extreme_remove_percentile_win(.x)) %>%
                    mutate_at(vars(starts_with("chem")),
                              ~replace(., is.na(.)|!is.finite(.), 0) 
                              %>% as.vector()) %>% 
                    method
                }) 
            }) 
        }) 
    }) %>% 
    set_names("lb_sd_metal_wt_processed", 
              "lb_sd_copper_wt_processed",
              "lb_sd_op_wt_processed") %>% 
    list2env(.GlobalEnv) %>% 
    invisible()
  
  # lb_sd_metal_wt_10_processed %>% 
  #   set_names("lb_sd_wt_10_quantile_metal", 
  #             "lb_sd_wt_10_evernever_metal",
  #             "lb_sd_wt_10_ztrans_metal",
  #             "lb_sd_wt_10_count_win_metal") %>% 
  #   list2env(.GlobalEnv)
  

  
  # further process with count data
  
list(lb_sd_metal_wt_processed, lb_sd_copper_wt_processed, 
     lb_sd_op_wt_processed) %>% 
    map(function(df){
      list(
        df[[4]],
        list(df[[4]][[2]], 
             df[[4]][[2]])
      ) %>% 
        map(function(dflist){
          dflist %>% 
            pmap(function(df1, df2){
              df1 %>% 
                mutate(
                  count = rowSums(
                    across(starts_with("chem"), 
                           ~. > median(df2[[cur_column()]])))
                  # ,
                  # copper_count = rowSums(
                  #   across(matches(chem_copper), 
                  #          ~. > median(df2[[cur_column()]])))
                ) %>% 
                select(-starts_with("chem")) %>% 
                relocate(pegid, count)
            })
        }) 
    }) %>% 
    set_names("lb_sd_metal_wt_count", 
              "lb_sd_copper_wt_count",
              "lb_sd_op_wt_count") %>% 
    list2env(.GlobalEnv) %>% 
    invisible()
  
}



list(
  c(lb_sd_metal_wt_count[[1]], lb_sd_metal_wt_count[[2]]),
  list(id_remove_c, id_remove_r, id_remove_c, id_remove_r)
) %>% 
  pmap(function(data1, data2){
    data1 %>% 
      filter(pegid %notin% data2 & !is.na(pegid)) %>% 
      pull(sampleid) 
  }) %>% 
  set_names("sampleid_pd_c","sampleid_pd_r",
            "sampleid_ctrl_c","sampleid_ctrl_r") %>% 
  list2env(.,envir = .GlobalEnv) %>% 
  invisible()

peg_noob_nors_win_total <- list(PEG_NOOB_nors_win_filter_ctrl_r, 
                                PEG_NOOB_nors_win_filter_pd_r) %>% 
  bind_cols()

combined_resid_total <- list(combined_resid_filter_ctrl_r, 
                             combined_resid_filter_pd_r) %>% 
  bind_cols()

```

# Data exploration

## Exposure

```{r}
myvar <- quote_all(pegid, sampleid, age, pd_new,female,
                   smokers, a1_schyrs, ethnicity, county,
                   pdstudystudy, meanmethbysample)


#using count data
list(lb_sd_metal_wt_count, lb_sd_copper_wt_count, 
     lb_sd_op_wt_count) %>% 
  map(function(df){
    list(
      df[[1]], df[[2]]
    ) %>% 
      map(function(datalist){
        list(datalist, 
             list(exp_yrs_lag_c, exp_yrs_lag_r)) %>%
          pmap(function(data, exp_yrs){
            data %>% 
              dplyr::select(pegid, count) %>% 
              left_join(exp_yrs, by = "pegid")
              # mutate(count = count/exp_yrs_lag_dr)
          }) %>% 
          purrr::reduce(full_join, by = "pegid") %>% 
          mutate_all(~replace(., is.na(.), 0)) %>% 
          transmute(pegid = pegid,
                    total = count.x + count.y)
      })
  }) %>% 
  set_names("count_combine_metal", 
            "count_combine_copper",
            "count_combine_op") %>% 
  list2env(.GlobalEnv) %>% 
  invisible()

list(count_combine_metal, count_combine_copper, count_combine_op) %>% 
  map(function(data){
    data %>% 
      bind_rows()
  }) %>% 
  set_names("count_combine_metal_total", "count_combine_copper_total", 
            "count_combine_op_total") %>% 
  list2env(.GlobalEnv) %>% 
  invisible()

count_combine_copper_total %>% 
  ggplot(aes(x = total)) + 
  geom_histogram(binwidth=1) +
  labs(
    title = "Histogram of total copper exposure",
  )
skim(count_combine_copper_total$total)


count_combine_op_total %>% 
  ggplot(aes(x = total)) + 
  geom_histogram(binwidth=1) +
  labs(
    title = "Histogram of total OP exposure",
  )

skim(count_combine_op_total$total)

```

## Demographic information

```{r}
## create table 1
c(lb_sd_metal_wt_count[[1]], 
  lb_sd_metal_wt_count[[2]]) %>% 
  map(function(data){
    data %>% 
      dplyr::select(all_of(myvar))
  }) %>% 
  rbindlist() %>% 
  left_join(count_combine_copper_total, by = "pegid") %>% 
  left_join(count_combine_op_total %>% 
              dplyr::select(pegid, total), by = "pegid") %>%
  set_variable_labels(
    pegid = "PEGID",
    age = "Age",
    pd_new = "PD status",
    female = "Sex",
    #race_new = "Race/Ethnicity",
    ethnicity = "Ethnicity",
    smokers = "Smoking status",
    pdstudystudy = "PEG study",
    meanmethbysample = "Mean methylation",
    a1_schyrs = "School years",
    total.x = "Copper count",
    total.y = "OP count",
    county = "County"
  ) %>% 
  distinct() %>% 
  #filter(pegid %in% datSampleSteve$externaldnacode) %>% 
  dplyr::select(-c(sampleid,pegid, pdstudystudy, county, a1_schyrs)) %>%
  tbl_summary(missing = "no",
              by = pd_new,
              #type=list(c(female) ~ "categorical"),
              statistic = list(all_continuous() ~ "{mean} ({sd})",
                               all_categorical() ~ "{n} ({p}%)"),
              digits = list(all_continuous() ~ 1,
                            all_categorical() ~ 1)) %>%
  add_overall() %>% 
  modify_header(label = "**Characteristics**") %>%
  # modify_spanning_header(starts_with("stat_") ~ "**PD status**") %>%
  modify_caption("Table 1. Demographic characteristics of PEG participants (N = {N})") %>%
  bold_labels() %>% 
  as_flex_table()
```

# EWAS Analysis

## CpG level analysis

  - This step regressed individual CpG methylation level to the count measurement using the `meffil` package. 
  - Multiple testing was taken account by B-H correction (p <10E-07 for suggestive association)

### Differential methylated probes (DMP)

```{r}
#for load result use
list.dirs(here::here(),recursive = FALSE) %>%
  list.files("\\.RData$", full.names = TRUE, recursive = T) %>%
  grep("meffil_count",.,
       value=TRUE, ignore.case = TRUE) %>%
  # keep(~!str_detect(.x,"win|dmplist|old")) %>%
  map(.,load,.GlobalEnv) %>% 
  invisible()

```

#### Manhatton plot

![manhatton](figures/dmp_plot.png)

A total of 101 CpG sites were identified as differentially methylated with copper exposure in PD patients when adjusted for OP. The top 10 CpG sites are shown in the figure below. The x-axis represents the copper count, and the y-axis represents the beta value of CpG sites. We can see that the beta value of PD patients were consistently lower than controls across the top 10 CpG sites.


#### Scatter plot

![scatter](figures/scatter_plot.png)

#### EWAS table

The detailed information of the differentially methylated CpG sites were shown in the table below.

```{r}
list.dirs(here::here(),recursive = FALSE) %>%
  list.files("\\.csv$", full.names = TRUE, recursive = T) %>%
  grep("annote_table_op_case",.,
       value=TRUE, ignore.case = TRUE) %>%
  # keep(~!str_detect(.x,"win|dmplist|old")) %>%
  map(read_csv) %>% 
  # mutate_at(vars(p.value:coefficeient.se), ~round(., 2)) %>%
  set_names("annote_table_op_case") %>%
  list2env(.,envir = .GlobalEnv) %>% 
  invisible()

datatable(annote_table_op_case %>% 
            arrange(p.value), 
          rownames = FALSE,
          extensions = "Buttons",
          options = list(
            dom = "Bfrtip",
            buttons = c("copy", "csv", "excel", "pdf", "print"),
            scrollX = TRUE, 
                         paging=TRUE,
                         # fixedHeader=TRUE,
                         className = 'dt-center', targets = 0:4),
          caption = "Table: EWAS analysis in PD patients"
          )
```

*Scatter plot: *
Since no significant CpG popped up in controls, we need to check the association between case and control methylation levels
x-axis: cpg beta-value for controls
y-axis: cpg beta-value for cases

*Gene set enrichment analysis*
Put in all CpG sites into the analysis: 
Separate into 4 groups: 
1.	Significant CpGs in the gene list
2.	Significant CpGs not in the gene list
3.	Not significant CpGs in the gene list
4.	Not significant CpGs not in the gene list

*Region level analysis*
Compare the results between ChAMP package and DMRcate package


### Gene set enrichment analysis (GSEA)

I applied `gometh` function in the `missMethyl` package to perform analysis. I used all CpGs with a p.value < 10E-4 (n = 3797) for the analysis in PD patients. (might not be correct)

```{r}
### method 2: missMethyl package

library(missMethyl)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)

topCpGs_case <- meffil_count_op_case$total$analyses$all$table %>% 
  filter(-log10(p.value) > 4) %>% 
  rownames_to_column("cpg") %>%
  arrange(p.value)

sigCpGs_case <- topCpGs_case %>% 
  pull(cpg)

```

#### Gene ontology (GO) term analysis

```{r}
gst_go_case <- gometh(sig.cpg=sigCpGs_case, all.cpg=rownames(peg_noob_nors_win_total), 
                 collection="GO",
                 plot.bias=FALSE)

datatable(gst_go_case %>% 
            arrange(`P.DE`), 
          rownames = FALSE,
          extensions = "Buttons",
          options = list(
            dom = "Bfrtip",
            buttons = c("copy", "csv", "excel", "pdf", "print"),
            scrollX = TRUE, 
                         paging=TRUE,
                         # fixedHeader=TRUE,
                         className = 'dt-center', targets = 0:4),
          caption = "Table: Go term analysis in PD patients"
          )
```


#### Kyoto Encyclopedia of Genes and Genomes (KEGG) pathway analysis

```{r}

gst_kegg_case <- gometh(sig.cpg=sigCpGs_case, all.cpg=rownames(peg_noob_nors_win_total), 
                   collection="KEGG",
                   plot.bias=FALSE)

datatable(gst_kegg_case %>% 
            arrange(`P.DE`), 
          rownames = FALSE,
          extensions = "Buttons",
          options = list(
            dom = "Bfrtip",
            buttons = c("copy", "csv", "excel", "pdf", "print"),
            scrollX = TRUE, 
                         paging=TRUE,
                         # fixedHeader=TRUE,
                         className = 'dt-center', targets = 0:4),
          caption = "Table: KEGG pathway analysis in PD patients"
          )
```

## Region level analysis

  - `DMRcate` package was applied to identify DMRs in PD patients.
  - FDR < 0.05 for suggestive association

### Differentially methylated regions (DMR)
```{r}
list.dirs(here::here(),recursive = FALSE) %>%
  list.files("\\.RData$", full.names = TRUE, recursive = T) %>%
  grep("DMRs",.,
       value=TRUE, ignore.case = TRUE) %>%
  # keep(~!str_detect(.x,"win|dmplist|old")) %>%
  map(.,load,.GlobalEnv) %>% 
  invisible()

# myAnnotation <- cpg.annotate(
#   object = as.matrix(PEG_NOOB_nors_win_filter_pd_r), 
#   datatype = "array",
#   what = "Beta",
#   analysis.type = "differential",
#   design = design,
#   contrasts = FALSE,
#   coef = 2,
#   arraytype = "450K",
#   fdr = 0.05)

# 
# # DMR analysis
# DMRs <- dmrcate(myAnnotation, lambda=1000, C=2)

library(DMRcate)

results.ranges <- extractRanges(DMRs)

dmr_table <- results.ranges %>% 
  as.data.frame() %>% 
  arrange(min_smoothed_fdr) %>%
  filter(no.cpgs >= 5)

datatable(dmr_table, 
          rownames = FALSE,
          extensions = "Buttons",
          options = list(
            dom = "Bfrtip",
            buttons = c("copy", "csv", "excel", "pdf", "print"),
            scrollX = TRUE, 
                         paging=TRUE,
                         # fixedHeader=TRUE,
                         className = 'dt-center', targets = 0:4),
          caption = "Table: DMR in PD patients"
          )
```

### Gene set testing for DMRs

#### Gene ontology (GO) term analysis
```{r}
gst.region_go <- goregion(results.ranges, 
                          all.cpg=rownames(peg_noob_nors_win_total), 
                       collection="GO", array.type="450K", plot.bias=FALSE)

datatable(gst.region_go %>% 
            arrange(`P.DE`),
          rownames = FALSE,
          extensions = "Buttons",
          options = list(
            dom = "Bfrtip",
            buttons = c("copy", "csv", "excel", "pdf", "print"),
            scrollX = TRUE, 
                         paging=TRUE,
                         # fixedHeader=TRUE,
                         className = 'dt-center', targets = 0:4),
          caption = "Table: Go term analysis for region level analysis in PD patients"
          )

```

#### KEGG pathway analysis

```{r}
gst.region_kegg <- goregion(results.ranges, 
                          all.cpg=rownames(peg_noob_nors_win_total), 
                       collection="KEGG", array.type="450K", plot.bias=FALSE)

datatable(gst.region_kegg %>% 
            arrange(`P.DE`),
          rownames = FALSE,
          extensions = "Buttons",
          options = list(
            dom = "Bfrtip",
            buttons = c("copy", "csv", "excel", "pdf", "print"),
            scrollX = TRUE, 
                         paging=TRUE,
                         # fixedHeader=TRUE,
                         className = 'dt-center', targets = 0:4),
          caption = "Table: KEGG pathway analysis for region level analysis in PD patients"
          )
```